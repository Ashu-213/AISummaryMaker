import React, { useState } from 'react';
import FileUploader from './components/FileUploader';
import TextInput from './components/TextInput';
import SummaryResult from './components/SummaryResult';
import LoadingSpinner from './components/LoadingSpinner';
import axios from 'axios';

const API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://127.0.0.1:5000';

function App() {
  const [inputText, setInputText] = useState('');
  const [summaryData, setSummaryData] = useState(null);
  const [userNotes, setUserNotes] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');
  const [summaryLength, setSummaryLength] = useState('medium');
  const [currentStep, setCurrentStep] = useState('input'); // 'input', 'result'

  const handlePdfUpload = async (file) => {
    setError('');
    setIsLoading(true);
    
    try {
      const formData = new FormData();
      formData.append('file', file);
      
      const response = await axios.post(`${API_BASE_URL}/extract-pdf`, formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });
      
      setInputText(response.data.text);
      setError('');
    } catch (err) {
      setError(err.response?.data?.error || 'Failed to extract text from PDF');
    } finally {
      setIsLoading(false);
    }
  };

  const handleSummarize = async () => {
    if (!inputText.trim()) {
      setError('Please provide some text to summarize');
      return;
    }

    setError('');
    setIsLoading(true);
    
    try {
      const response = await axios.post(`${API_BASE_URL}/summarize`, {
        text: inputText,
        length: summaryLength
      });
      
      setSummaryData(response.data);
      setCurrentStep('result');
      setError('');
    } catch (err) {
      setError(err.response?.data?.error || 'Failed to generate summary');
    } finally {
      setIsLoading(false);
    }
  };

  const handleStartOver = () => {
    setInputText('');
    setSummaryData(null);
    setUserNotes('');
    setError('');
    setCurrentStep('input');
  };

  const handleCopyToClipboard = () => {
    const fullText = `🤖 AI SUMMARY:\n${summaryData.summary}\n\n🔑 KEY POINTS:\n${summaryData.key_points.map((point, i) => `${i + 1}. ${point}`).join('\n')}\n\n📝 MY NOTES:\n${userNotes || 'No notes added.'}`;
    navigator.clipboard.writeText(fullText);
    
    // Show feedback
    const btn = document.querySelector('.copy-btn');
    if (btn) {
      btn.textContent = '✅ Copied!';
      setTimeout(() => {
        btn.textContent = '📋 Copy to Clipboard';
      }, 2000);
    }
  };

  const handleDownloadTxt = () => {
    const fullText = `AI SUMMARY REPORT
${'='.repeat(50)}

📊 SUMMARY STATISTICS:
• Original Text: ${summaryData.original_length} characters
• Summary: ${summaryData.summary_length} characters  
• Compression: ${Math.round((1 - summaryData.summary_length / summaryData.original_length) * 100)}%
• Sections Covered: ${summaryData.sections_covered || 'N/A'}
• Method: ${summaryData.method}

🤖 AI SUMMARY:
${summaryData.summary}

🔑 KEY POINTS:
${summaryData.key_points.map((point, i) => `${i + 1}. ${point}`).join('\n')}

📝 MY NOTES:
${userNotes || 'No notes added.'}

${'='.repeat(50)}
Generated by AI Summary Maker
`;
    
    const blob = new Blob([fullText], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `ai-summary-${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50">
      {/* Animated Background Elements */}
      <div className="fixed inset-0 overflow-hidden pointer-events-none">
        <div className="absolute -top-40 -right-40 w-80 h-80 bg-purple-300 rounded-full mix-blend-multiply filter blur-xl opacity-70 animate-pulse"></div>
        <div className="absolute -bottom-40 -left-40 w-80 h-80 bg-blue-300 rounded-full mix-blend-multiply filter blur-xl opacity-70 animate-pulse"></div>
      </div>

      <div className="relative z-10 container mx-auto px-4 py-8">
        {/* Header */}
        <div className="text-center mb-12 slide-in">
          <h1 className="text-6xl font-bold mb-4 logo-container">
            <span className="logo-container">🚀</span> <span className="gradient-text">AI Summary Maker</span>
          </h1>
          <p className="text-xl text-gray-600 max-w-2xl mx-auto leading-relaxed">
            Transform lengthy documents into <span className="font-semibold text-blue-600">structured insights</span> with our intelligent summarization engine
          </p>
          <div className="mt-6 flex justify-center space-x-4 logo-container">
            <span className="inline-flex items-center px-4 py-2 bg-blue-100 text-blue-800 rounded-full text-sm font-medium">
              📄 PDF Support
            </span>
            <span className="inline-flex items-center px-4 py-2 bg-green-100 text-green-800 rounded-full text-sm font-medium">
              🤖 AI Powered
            </span>
            <span className="inline-flex items-center px-4 py-2 bg-purple-100 text-purple-800 rounded-full text-sm font-medium">
              📝 Note Taking
            </span>
          </div>
        </div>

        {/* Error Message */}
        {error && (
          <div className="mb-8 p-6 bg-red-50 border-l-4 border-red-500 text-red-700 rounded-xl shadow-lg slide-in">
            <div className="flex items-center">
              <span className="text-2xl mr-3">⚠️</span>
              <div>
                <h3 className="font-semibold">Oops! Something went wrong</h3>
                <p>{error}</p>
              </div>
            </div>
          </div>
        )}

        {/* Loading Spinner */}
        {isLoading && <LoadingSpinner />}

        {/* Main Content */}
        {currentStep === 'input' && !isLoading && (
          <div className="max-w-6xl mx-auto">
            <div className="grid lg:grid-cols-2 gap-8 mb-12">
              {/* PDF Upload */}
              <div className="card slide-in">
                <div className="flex items-center mb-6">
                  <span className="text-3xl mr-3 logo-container">📄</span>
                  <h2 className="text-2xl font-bold text-gray-800">Upload PDF</h2>
                </div>
                <FileUploader onFileUpload={handlePdfUpload} />
              </div>

              {/* Manual Text Input */}
              <div className="card slide-in">
                <div className="flex items-center mb-6">
                  <span className="text-3xl mr-3">✏️</span>
                  <h2 className="text-2xl font-bold text-gray-800">Type or Paste Text</h2>
                </div>
                <TextInput 
                  value={inputText}
                  onChange={setInputText}
                />
              </div>
            </div>

            {/* Summary Controls */}
            {inputText && (
              <div className="card-highlight max-w-3xl mx-auto pulse-glow slide-in">
                <div className="text-center mb-6">
                  <h3 className="text-2xl font-bold text-gray-800 mb-2 logo-container">✨ Ready to Summarize</h3>
                  <p className="text-gray-600">Choose your preferred summary style and let AI do the magic!</p>
                </div>
                
                <div className="grid md:grid-cols-3 gap-4 mb-8">
                  <button
                    onClick={() => setSummaryLength('short')}
                    className={`p-4 rounded-xl border-2 transition-all duration-200 ${
                      summaryLength === 'short' 
                        ? 'border-blue-500 bg-blue-50 text-blue-700' 
                        : 'border-gray-200 hover:border-blue-300'
                    }`}
                  >
                    <div className="text-2xl mb-2">⚡</div>
                    <div className="font-semibold">Quick</div>
                    <div className="text-sm text-gray-600">2-3 sentences</div>
                  </button>
                  
                  <button
                    onClick={() => setSummaryLength('medium')}
                    className={`p-4 rounded-xl border-2 transition-all duration-200 ${
                      summaryLength === 'medium' 
                        ? 'border-blue-500 bg-blue-50 text-blue-700' 
                        : 'border-gray-200 hover:border-blue-300'
                    }`}
                  >
                    <div className="text-2xl mb-2">🎯</div>
                    <div className="font-semibold">Balanced</div>
                    <div className="text-sm text-gray-600">4-5 sentences</div>
                  </button>
                  
                  <button
                    onClick={() => setSummaryLength('detailed')}
                    className={`p-4 rounded-xl border-2 transition-all duration-200 ${
                      summaryLength === 'detailed' 
                        ? 'border-blue-500 bg-blue-50 text-blue-700' 
                        : 'border-gray-200 hover:border-blue-300'
                    }`}
                  >
                    <div className="text-2xl mb-2">📋</div>
                    <div className="font-semibold">Comprehensive</div>
                    <div className="text-sm text-gray-600">6-8 sentences</div>
                  </button>
                </div>
                
                <button 
                  onClick={handleSummarize}
                  disabled={isLoading || !inputText.trim()}
                  className="btn-primary w-full text-lg py-4"
                >
                  <span className="mr-2 logo-container">🤖</span>
                  Generate AI Summary
                </button>
              </div>
            )}
          </div>
        )}

        {/* Results Page */}
        {currentStep === 'result' && !isLoading && summaryData && (
          <SummaryResult
            summaryData={summaryData}
            userNotes={userNotes}
            onNotesChange={setUserNotes}
            onCopy={handleCopyToClipboard}
            onDownload={handleDownloadTxt}
            onStartOver={handleStartOver}
          />
        )}
      </div>
    </div>
  );
}

export default App;
